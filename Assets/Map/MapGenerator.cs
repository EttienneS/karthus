using System;
using System.Collections.Generic;
using System.Linq;
using Debug = UnityEngine.Debug;
using Random = UnityEngine.Random;

public class MapGenerator
{
    public MapPreset MapPreset;

    public CellData CreateCell(int x, int y)
    {
        var cell = new CellData
        {
            Coordinates = new Coordinates(x, y)
        };

        Game.MapGrid.Cells.Add(cell);

        Game.MapGrid.AddCellLabel(cell);

        return cell;
    }

    public void GenerateTowns()
    {
        // approach
        // City centers: Pick some points of the still empty map as main traffic nodes. They should be evenly distributed around the map
        // Highways: Connect the main traffic nodes to their neighbors and to the outside world using major roads.
        // Freeways: Subdivide the cells generated by the major roads by creating some minor roads.
        // Streets: Repeat the subdivision process recursively with smaller and smaller roads until you've reached the desired building block size
        // Blocks: Decide the purpose of each building block(residential, retail, corporate, industrial...).Relevant factors are the sizes of the neighboring roads and the distance from the center.
        // Allotments: Divide the edges of all building blocks into lots(this means each lot has at least one edge which is connected to a road).
        // Buildings: Generate a fitting building for each lot.

        var towns = new List<Town>();

        for (int i = 0; i < Game.MapGrid.MapSize / 40; i++)
        {
            var cell = Game.MapGrid.GetRandomPathableCell();
            var radius = Random.Range(8, 15);
            var surrounds = Game.MapGrid.GetCircle(cell.Coordinates, radius);

            if (surrounds.Count(c => c.TravelCost > 0) / surrounds.Count < 0.75)
            {
                i--;
                continue;
            }

            towns.Add(new Town(cell, surrounds, radius));
        }

        foreach (var town in towns)
        {
            var height = town.Height;
            foreach (var cell in town.Cells)
            {
                if (cell.TravelCost < 0)
                    continue;

                cell.Height = height;
                cell.SetStructure(Game.StructureController.GetStructure("Road", FactionController.WorldFaction));
            }

            MakeRune(town.Center, "BindRune", FactionController.WorldFaction);

            foreach (var otherTown in towns)
            {
                if (town == otherTown)
                    continue;

                foreach (var cell in Pathfinder.FindPath(otherTown.Center.GetRandomNeighbor(),
                                                         town.Center.GetRandomNeighbor(),
                                                         Mobility.AbyssWalk))
                {
                    cell.SetStructure(Game.StructureController.GetStructure("Road", FactionController.WorldFaction));
                }
            }
        }
    }

    public Structure MakeRune(CellData location, string name, Faction faction)
    {
        Game.MapGrid.BindCell(location, faction.Core);

        if (location.Structure != null)
            Game.StructureController.DestroyStructure(location.Structure);

        var rune = Game.StructureController.GetStructure(name, faction);
        Game.MapGrid.BindCell(location, rune);
        location.SetStructure(rune);

        if (name == "BindRune")
        {
            foreach (var c in Game.MapGrid.BleedGroup(Game.MapGrid.GetCircle(location.Coordinates, Random.Range(4, 7))))
            {
                Game.MapGrid.BindCell(c, rune);
            }
        }

        if (rune.Spell != null)
        {
            Game.MagicController.AddRune(rune);
        }

        return rune;
    }

    public void SpawnCreatures()
    {
        var sw = new System.Diagnostics.Stopwatch();
        sw.Start();

        var midCell = Game.MapGrid
            .GetCircle(new Coordinates(Game.MapGrid.MapSize / 2, Game.MapGrid.MapSize / 2), 10)
            .First(c => c.CellType != CellType.Water || c.CellType != CellType.Mountain);

        if (midCell.Structure != null)
        {
            Game.StructureController.DestroyStructure(midCell.Structure);
        }

        SummonCells(midCell, FactionController.PlayerFaction);

        midCell.SetStructure(FactionController.PlayerFaction.Core);

        for (int i = 0; i < 3; i++)
        {
            Game.CreatureController.SpawnCreature(Game.CreatureController.GetCreatureOfType("Person"),
                                         midCell.GetNeighbor(Helpers.RandomEnumValue<Direction>()).Coordinates,
                                         FactionController.PlayerFaction);
        }

        Game.CameraController.MoveToCell(midCell.GetNeighbor(Direction.E));

        var spawns = midCell.Neighbors.ToList();

        for (int i = 0; i < Game.MapGrid.MapSize; i++)
        {
            Game.CreatureController.SpawnCreature(Game.CreatureController.GetCreatureOfType("AbyssWraith"),
                                             Game.MapGrid.GetRandomCell().Coordinates,
                                             FactionController.MonsterFaction);
        }

        sw.Stop();

        Game.MapGrid.ProcessBindings(Game.MapGrid.PendingBinding.Count * 200);

        Debug.Log($"Did initial spawn in {sw.Elapsed}s");
    }

    internal void FillCells()
    {
        foreach (var cell in Game.MapGrid.Cells)
        {
            PopulateCell(cell);
            Game.MapGrid.RefreshCell(cell);
        }
    }

    internal void GenerateMapFromPreset()
    {
        var sw = new System.Diagnostics.Stopwatch();

        sw.Start();
        Game.MapGrid.Cells = new List<CellData>();

        for (var y = 0; y < Game.MapGrid.MapSize; y++)
        {
            for (var x = 0; x < Game.MapGrid.MapSize; x++)
            {
                CreateCell(x, y);
            }
        }

        Debug.Log($"Created cells in {sw.Elapsed.TotalSeconds}s");
        sw.Restart();

        LinkNeighbours();
        Debug.Log($"Linked cells in {sw.Elapsed.TotalSeconds}s");
        sw.Restart();

        if (Game.MapGrid.Seed == 0)
        {
            Game.MapGrid.Seed = Random.Range(1, 10000);
        }

        GenerateMapCells();
        Debug.Log($"Generated map in {sw.Elapsed.TotalSeconds}s");
        sw.Restart();

        ResetSearchPriorities();
        Debug.Log($"Reset search on cells in {sw.Elapsed.TotalSeconds}s");
    }

    internal void LinkNeighbours()
    {
        for (var y = 0; y < Game.MapGrid.MapSize; y++)
        {
            for (var x = 0; x < Game.MapGrid.MapSize; x++)
            {
                var cell = Game.MapGrid.CellLookup[(x, y)];

                if (x > 0)
                {
                    cell.SetNeighbor(Direction.W, Game.MapGrid.CellLookup[(x - 1, y)]);

                    if (y > 0)
                    {
                        cell.SetNeighbor(Direction.SW, Game.MapGrid.CellLookup[(x - 1, y - 1)]);

                        if (x < Game.MapGrid.MapSize - 1)
                        {
                            cell.SetNeighbor(Direction.SE, Game.MapGrid.CellLookup[(x + 1, y - 1)]);
                        }
                    }
                }

                if (y > 0)
                {
                    cell.SetNeighbor(Direction.S, Game.MapGrid.CellLookup[(x, y - 1)]);
                }
            }
        }
    }

    internal void Make()
    {
        MapPreset = new MapPreset((0.80f, CellType.Mountain),
                                  (0.7f, CellType.Stone),
                                  (0.5f, CellType.Forest),
                                  (0.3f, CellType.Grass),
                                  (0.2f, CellType.Dirt),
                                  (0.0f, CellType.Water));

        GenerateMapFromPreset();

        GenerateTowns();
        FillCells();

        CreateBindRunes();
        CreateLeyLines();

        SpawnCreatures();
    }

    internal void ResetSearchPriorities()
    {
        // ensure that all cells have their phases reset
        for (var y = 0; y < Game.MapGrid.MapSize; y++)
        {
            for (var x = 0; x < Game.MapGrid.MapSize; x++)
            {
                Game.MapGrid.CellLookup[(x, y)].SearchPhase = 0;
            }
        }
    }

    private void CreateBindRunes()
    {
        for (int i = 0; i < Game.MapGrid.MapSize / 2; i++)
        {
            var cell = Game.MapGrid.GetRandomCell();
            MakeRune(cell, "BindRune", FactionController.WorldFaction);
        }
    }

    private void CreateLeyLines()
    {
        var nexusPoints = new List<CellData>();
        for (int i = 0; i < Game.MapGrid.MapSize / 10; i++)
        {
            var point = Game.MapGrid.GetRandomCell();
            nexusPoints.Add(point);
            MakeRune(point, "LeySpring", FactionController.WorldFaction);
        }

        var v = Enum.GetValues(typeof(ManaColor));
        var counter = 0;
        foreach (var cell in nexusPoints)
        {
            var target = nexusPoints[(int)(Random.value * (nexusPoints.Count - 1))];
            Game.LeyLineController.MakeLine(Pathfinder.FindPath(cell, target, Mobility.Fly), (ManaColor)v.GetValue(counter));

            counter++;

            if (counter >= v.Length)
            {
                counter = 0;
            }
        }
    }

    private void GenerateMapCells()
    {
        for (int x = 0; x < Game.MapGrid.MapSize; x++)
        {
            for (int y = 0; y < Game.MapGrid.MapSize; y++)
            {
                var cell = Game.MapGrid
                    .GetCellAtCoordinate(new Coordinates(x, y));

                cell.Height = MapPreset.GetCellHeight(cell.Coordinates.X, cell.Coordinates.Y);
            }
        }
    }

    private void PopulateCell(CellData cell)
    {
        if (cell.Structure != null)
        {
            return;
        }
        var value = Random.value;
        var world = FactionController.Factions[FactionConstants.World];
        switch (cell.CellType)
        {
            case CellType.Grass:
                if (value > 0.8)
                {
                    cell.SetStructure(Game.StructureController.GetStructure("Bush", world));
                }
                break;

            case CellType.Forest:
                if (value > 0.95)
                {
                    cell.SetStructure(Game.StructureController.GetStructure("Tree", world));
                }
                else if (value > 0.8)
                {
                    cell.SetStructure(Game.StructureController.GetStructure("Bush", world));
                }
                break;
        }
    }

    private void SummonCells(CellData center, Faction faction)
    {
        Game.MapGrid.BindCell(center, faction.Core);

        foreach (var cell in center.Neighbors)
        {
            Game.MapGrid.BindCell(cell, faction.Core);
        }

        MakeRune(center.GetNeighbor(Direction.N).GetNeighbor(Direction.N).GetNeighbor(Direction.N), "BindRune", faction);
        MakeRune(center.GetNeighbor(Direction.E).GetNeighbor(Direction.E).GetNeighbor(Direction.E), "BindRune", faction);
        MakeRune(center.GetNeighbor(Direction.S).GetNeighbor(Direction.S).GetNeighbor(Direction.S), "BindRune", faction);
        MakeRune(center.GetNeighbor(Direction.W).GetNeighbor(Direction.W).GetNeighbor(Direction.W), "BindRune", faction);
    }
}